// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [Applicant]
            Decoders.addDecoder(clazz: [Applicant].self) { (source: AnyObject) -> [Applicant] in
                return Decoders.decode(clazz: [Applicant].self, source: source)
            }
            // Decoder for Applicant
            Decoders.addDecoder(clazz: Applicant.self) { (source: AnyObject) -> Applicant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Applicant()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.dob = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["dob"])
                instance.memberId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["member_id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.relationship = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["relationship"])
                instance.smoker = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["smoker"])
                instance.ssn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ssn"])
                return instance
            }


            // Decoder for [Base]
            Decoders.addDecoder(clazz: [Base].self) { (source: AnyObject) -> [Base] in
                return Decoders.decode(clazz: [Base].self, source: source)
            }
            // Decoder for Base
            Decoders.addDecoder(clazz: Base.self) { (source: AnyObject) -> Base in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Base()
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                return instance
            }


            // Decoder for [Carrier]
            Decoders.addDecoder(clazz: [Carrier].self) { (source: AnyObject) -> [Carrier] in
                return Decoders.decode(clazz: [Carrier].self, source: source)
            }
            // Decoder for Carrier
            Decoders.addDecoder(clazz: Carrier.self) { (source: AnyObject) -> Carrier in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Carrier()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.logoPath = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo_path"])
                return instance
            }


            // Decoder for [CarrierSubsidiary]
            Decoders.addDecoder(clazz: [CarrierSubsidiary].self) { (source: AnyObject) -> [CarrierSubsidiary] in
                return Decoders.decode(clazz: [CarrierSubsidiary].self, source: source)
            }
            // Decoder for CarrierSubsidiary
            Decoders.addDecoder(clazz: CarrierSubsidiary.self) { (source: AnyObject) -> CarrierSubsidiary in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CarrierSubsidiary()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [County]
            Decoders.addDecoder(clazz: [County].self) { (source: AnyObject) -> [County] in
                return Decoders.decode(clazz: [County].self, source: source)
            }
            // Decoder for County
            Decoders.addDecoder(clazz: County.self) { (source: AnyObject) -> County in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = County()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.fipsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fips_code"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.stateCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_code"])
                instance.stateId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["state_id"])
                instance.stateLive = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["state_live"])
                instance.stateLiveForBusiness = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["state_live_for_business"])
                return instance
            }


            // Decoder for [CountyBulk]
            Decoders.addDecoder(clazz: [CountyBulk].self) { (source: AnyObject) -> [CountyBulk] in
                return Decoders.decode(clazz: [CountyBulk].self, source: source)
            }
            // Decoder for CountyBulk
            Decoders.addDecoder(clazz: CountyBulk.self) { (source: AnyObject) -> CountyBulk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CountyBulk()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.stateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_id"])
                return instance
            }


            // Decoder for [Drug]
            Decoders.addDecoder(clazz: [Drug].self) { (source: AnyObject) -> [Drug] in
                return Decoders.decode(clazz: [Drug].self, source: source)
            }
            // Decoder for Drug
            Decoders.addDecoder(clazz: Drug.self) { (source: AnyObject) -> Drug in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Drug()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.proprietaryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["proprietary_name"])
                instance.nonProprietaryName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["non_proprietary_name"])
                instance.drugPackageIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drug_package_ids"])
                return instance
            }


            // Decoder for [DrugCoverage]
            Decoders.addDecoder(clazz: [DrugCoverage].self) { (source: AnyObject) -> [DrugCoverage] in
                return Decoders.decode(clazz: [DrugCoverage].self, source: source)
            }
            // Decoder for DrugCoverage
            Decoders.addDecoder(clazz: DrugCoverage.self) { (source: AnyObject) -> DrugCoverage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DrugCoverage()
                instance.planId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["plan_id"])
                instance.drugPackageId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["drug_package_id"])
                instance.tier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tier"])
                instance.quantityLimit = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["quantity_limit"])
                instance.priorAuthorization = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["prior_authorization"])
                instance.stepTherapy = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["step_therapy"])
                return instance
            }


            // Decoder for [DrugCoverageResponse]
            Decoders.addDecoder(clazz: [DrugCoverageResponse].self) { (source: AnyObject) -> [DrugCoverageResponse] in
                return Decoders.decode(clazz: [DrugCoverageResponse].self, source: source)
            }
            // Decoder for DrugCoverageResponse
            Decoders.addDecoder(clazz: DrugCoverageResponse.self) { (source: AnyObject) -> DrugCoverageResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DrugCoverageResponse()
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                instance.drugCoverages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drug_coverages"])
                instance.drugs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drugs"])
                instance.drugPackages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drug_packages"])
                return instance
            }


            // Decoder for [DrugPackage]
            Decoders.addDecoder(clazz: [DrugPackage].self) { (source: AnyObject) -> [DrugPackage] in
                return Decoders.decode(clazz: [DrugPackage].self, source: source)
            }
            // Decoder for DrugPackage
            Decoders.addDecoder(clazz: DrugPackage.self) { (source: AnyObject) -> DrugPackage in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DrugPackage()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                return instance
            }


            // Decoder for [DrugSearchResponse]
            Decoders.addDecoder(clazz: [DrugSearchResponse].self) { (source: AnyObject) -> [DrugSearchResponse] in
                return Decoders.decode(clazz: [DrugSearchResponse].self, source: source)
            }
            // Decoder for DrugSearchResponse
            Decoders.addDecoder(clazz: DrugSearchResponse.self) { (source: AnyObject) -> DrugSearchResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = DrugSearchResponse()
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                instance.drugs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drugs"])
                instance.drugPackages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drug_packages"])
                return instance
            }


            // Decoder for [Meta]
            Decoders.addDecoder(clazz: [Meta].self) { (source: AnyObject) -> [Meta] in
                return Decoders.decode(clazz: [Meta].self, source: source)
            }
            // Decoder for Meta
            Decoders.addDecoder(clazz: Meta.self) { (source: AnyObject) -> Meta in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Meta()
                instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"])
                return instance
            }


            // Decoder for [Plan]
            Decoders.addDecoder(clazz: [Plan].self) { (source: AnyObject) -> [Plan] in
                return Decoders.decode(clazz: [Plan].self, source: source)
            }
            // Decoder for Plan
            Decoders.addDecoder(clazz: Plan.self) { (source: AnyObject) -> Plan in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Plan()
                instance.adultDental = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["adult_dental"])
                instance.ambulance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ambulance"])
                instance.benefitsSummaryUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["benefits_summary_url"])
                instance.buyLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buy_link"])
                instance.carrierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrier_name"])
                instance.childDental = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["child_dental"])
                instance.childEyewear = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["child_eyewear"])
                instance.childEyeExam = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["child_eye_exam"])
                instance.customerServicePhoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer_service_phone_number"])
                instance.durableMedicalEquipment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["durable_medical_equipment"])
                instance.diagnosticTest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["diagnostic_test"])
                instance.drugFormularyUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["drug_formulary_url"])
                instance.effectiveDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effective_date"])
                instance.expirationDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expiration_date"])
                instance.emergencyRoom = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emergency_room"])
                instance.familyDrugDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_drug_deductible"])
                instance.familyDrugMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_drug_moop"])
                instance.familyMedicalDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_medical_deductible"])
                instance.familyMedicalMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_medical_moop"])
                instance.genericDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["generic_drugs"])
                instance.habilitationServices = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["habilitation_services"])
                instance.hiosIssuerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hios_issuer_id"])
                instance.homeHealthCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["home_health_care"])
                instance.hospiceService = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hospice_service"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.imaging = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imaging"])
                instance.inNetworkIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["in_network_ids"])
                instance.individualDrugDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_drug_deductible"])
                instance.individualDrugMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_drug_moop"])
                instance.individualMedicalDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_medical_deductible"])
                instance.individualMedicalMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_medical_moop"])
                instance.inpatientBirth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_birth"])
                instance.inpatientFacility = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_facility"])
                instance.inpatientMentalHealth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_mental_health"])
                instance.inpatientPhysician = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_physician"])
                instance.inpatientSubstance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_substance"])
                instance.level = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level"])
                instance.logoUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo_url"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.networkSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["network_size"])
                instance.nonPreferredBrandDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["non_preferred_brand_drugs"])
                instance.onMarket = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["on_market"])
                instance.offMarket = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["off_market"])
                instance.outOfNetworkCoverage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["out_of_network_coverage"])
                instance.outOfNetworkIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["out_of_network_ids"])
                instance.outpatientFacility = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_facility"])
                instance.outpatientMentalHealth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_mental_health"])
                instance.outpatientPhysician = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_physician"])
                instance.outpatientSubstance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_substance"])
                instance.planMarket = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["plan_market"])
                instance.planType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["plan_type"])
                instance.preferredBrandDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["preferred_brand_drugs"])
                instance.prenatalPostnatalCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prenatal_postnatal_care"])
                instance.preventativeCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["preventative_care"])
                instance.premiumSubsidized = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_subsidized"])
                instance.premium = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium"])
                instance.primaryCarePhysician = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_care_physician"])
                instance.rehabilitationServices = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rehabilitation_services"])
                instance.skilledNursing = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["skilled_nursing"])
                instance.specialist = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specialist"])
                instance.specialtyDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specialty_drugs"])
                instance.urgentCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["urgent_care"])
                return instance
            }


            // Decoder for [PlanCounty]
            Decoders.addDecoder(clazz: [PlanCounty].self) { (source: AnyObject) -> [PlanCounty] in
                return Decoders.decode(clazz: [PlanCounty].self, source: source)
            }
            // Decoder for PlanCounty
            Decoders.addDecoder(clazz: PlanCounty.self) { (source: AnyObject) -> PlanCounty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlanCounty()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.planId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["plan_id"])
                instance.countyId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["county_id"])
                return instance
            }


            // Decoder for [PlanCountyBulk]
            Decoders.addDecoder(clazz: [PlanCountyBulk].self) { (source: AnyObject) -> [PlanCountyBulk] in
                return Decoders.decode(clazz: [PlanCountyBulk].self, source: source)
            }
            // Decoder for PlanCountyBulk
            Decoders.addDecoder(clazz: PlanCountyBulk.self) { (source: AnyObject) -> PlanCountyBulk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlanCountyBulk()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.planId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["plan_id"])
                instance.countyId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["county_id"])
                return instance
            }


            // Decoder for [PlanSearchResponse]
            Decoders.addDecoder(clazz: [PlanSearchResponse].self) { (source: AnyObject) -> [PlanSearchResponse] in
                return Decoders.decode(clazz: [PlanSearchResponse].self, source: source)
            }
            // Decoder for PlanSearchResponse
            Decoders.addDecoder(clazz: PlanSearchResponse.self) { (source: AnyObject) -> PlanSearchResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlanSearchResponse()
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                instance.plans = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["plans"])
                instance.coverages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coverages"])
                return instance
            }


            // Decoder for [PlanSearchResult]
            Decoders.addDecoder(clazz: [PlanSearchResult].self) { (source: AnyObject) -> [PlanSearchResult] in
                return Decoders.decode(clazz: [PlanSearchResult].self, source: source)
            }
            // Decoder for PlanSearchResult
            Decoders.addDecoder(clazz: PlanSearchResult.self) { (source: AnyObject) -> PlanSearchResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PlanSearchResult()
                instance.adultDental = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["adult_dental"])
                instance.ambulance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ambulance"])
                instance.benefitsSummaryUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["benefits_summary_url"])
                instance.buyLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["buy_link"])
                instance.carrierName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["carrier_name"])
                instance.childDental = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["child_dental"])
                instance.childEyewear = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["child_eyewear"])
                instance.childEyeExam = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["child_eye_exam"])
                instance.customerServicePhoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["customer_service_phone_number"])
                instance.durableMedicalEquipment = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["durable_medical_equipment"])
                instance.diagnosticTest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["diagnostic_test"])
                instance.drugFormularyUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["drug_formulary_url"])
                instance.effectiveDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["effective_date"])
                instance.expirationDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expiration_date"])
                instance.emergencyRoom = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emergency_room"])
                instance.familyDrugDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_drug_deductible"])
                instance.familyDrugMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_drug_moop"])
                instance.familyMedicalDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_medical_deductible"])
                instance.familyMedicalMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["family_medical_moop"])
                instance.genericDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["generic_drugs"])
                instance.habilitationServices = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["habilitation_services"])
                instance.hiosIssuerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hios_issuer_id"])
                instance.homeHealthCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["home_health_care"])
                instance.hospiceService = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hospice_service"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.imaging = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imaging"])
                instance.inNetworkIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["in_network_ids"])
                instance.individualDrugDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_drug_deductible"])
                instance.individualDrugMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_drug_moop"])
                instance.individualMedicalDeductible = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_medical_deductible"])
                instance.individualMedicalMoop = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["individual_medical_moop"])
                instance.inpatientBirth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_birth"])
                instance.inpatientFacility = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_facility"])
                instance.inpatientMentalHealth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_mental_health"])
                instance.inpatientPhysician = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_physician"])
                instance.inpatientSubstance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["inpatient_substance"])
                instance.level = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["level"])
                instance.logoUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["logo_url"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.nonPreferredBrandDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["non_preferred_brand_drugs"])
                instance.onMarket = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["on_market"])
                instance.offMarket = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["off_market"])
                instance.outOfNetworkCoverage = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["out_of_network_coverage"])
                instance.outOfNetworkIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["out_of_network_ids"])
                instance.outpatientFacility = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_facility"])
                instance.outpatientMentalHealth = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_mental_health"])
                instance.outpatientPhysician = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_physician"])
                instance.outpatientSubstance = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["outpatient_substance"])
                instance.planMarket = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["plan_market"])
                instance.planType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["plan_type"])
                instance.preferredBrandDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["preferred_brand_drugs"])
                instance.prenatalPostnatalCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prenatal_postnatal_care"])
                instance.preventativeCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["preventative_care"])
                instance.premiumSubsidized = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_subsidized"])
                instance.premium = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium"])
                instance.primaryCarePhysician = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_care_physician"])
                instance.rehabilitationServices = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rehabilitation_services"])
                instance.skilledNursing = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["skilled_nursing"])
                instance.specialist = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specialist"])
                instance.specialtyDrugs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specialty_drugs"])
                instance.urgentCare = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["urgent_care"])
                instance.matchPercentage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["match_percentage"])
                instance.perfectMatchPercentage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["perfect_match_percentage"])
                instance.employeePremium = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["employee_premium"])
                instance.dependentPremium = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["dependent_premium"])
                return instance
            }


            // Decoder for [Pricing]
            Decoders.addDecoder(clazz: [Pricing].self) { (source: AnyObject) -> [Pricing] in
                return Decoders.decode(clazz: [Pricing].self, source: source)
            }
            // Decoder for Pricing
            Decoders.addDecoder(clazz: Pricing.self) { (source: AnyObject) -> Pricing in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Pricing()
                instance.age = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["age"])
                instance.effectiveDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["effective_date"])
                instance.expirationDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["expiration_date"])
                instance.planId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["plan_id"])
                instance.premiumChildOnly = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_child_only"])
                instance.premiumFamily = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_family"])
                instance.premiumSingle = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_single"])
                instance.premiumSingleAndChildren = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_single_and_children"])
                instance.premiumSingleAndSpouse = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_single_and_spouse"])
                instance.premiumSingleSmoker = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["premium_single_smoker"])
                instance.ratingAreaId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rating_area_id"])
                return instance
            }


            // Decoder for [Provider]
            Decoders.addDecoder(clazz: [Provider].self) { (source: AnyObject) -> [Provider] in
                return Decoders.decode(clazz: [Provider].self, source: source)
            }
            // Decoder for Provider
            Decoders.addDecoder(clazz: Provider.self) { (source: AnyObject) -> Provider in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Provider()
                instance.acceptingChangeOfPayorPatients = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["accepting_change_of_payor_patients"])
                instance.acceptingMedicaidPatients = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["accepting_medicaid_patients"])
                instance.acceptingMedicarePatients = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["accepting_medicare_patients"])
                instance.acceptingPrivatePatients = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["accepting_private_patients"])
                instance.acceptingReferralPatients = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["accepting_referral_patients"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.gender = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["gender"])
                instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"])
                instance.hiosIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["hios_ids"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"])
                instance.latitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["latitude"])
                instance.longitude = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["longitude"])
                instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middle_name"])
                instance.personalPhone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["personal_phone"])
                instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"])
                instance.presentationName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["presentation_name"])
                instance.specialty = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["specialty"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.stateId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["state_id"])
                instance.streetLine1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street_line_1"])
                instance.streetLine2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street_line_2"])
                instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suffix"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip_code"])
                return instance
            }


            // Decoder for [ProvidersSearchResponse]
            Decoders.addDecoder(clazz: [ProvidersSearchResponse].self) { (source: AnyObject) -> [ProvidersSearchResponse] in
                return Decoders.decode(clazz: [ProvidersSearchResponse].self, source: source)
            }
            // Decoder for ProvidersSearchResponse
            Decoders.addDecoder(clazz: ProvidersSearchResponse.self) { (source: AnyObject) -> ProvidersSearchResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ProvidersSearchResponse()
                instance.meta = Decoders.decodeOptional(clazz: Meta.self, source: sourceDictionary["meta"])
                instance.providers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["providers"])
                instance.states = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["states"])
                return instance
            }


            // Decoder for [RatingArea]
            Decoders.addDecoder(clazz: [RatingArea].self) { (source: AnyObject) -> [RatingArea] in
                return Decoders.decode(clazz: [RatingArea].self, source: source)
            }
            // Decoder for RatingArea
            Decoders.addDecoder(clazz: RatingArea.self) { (source: AnyObject) -> RatingArea in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RatingArea()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.stateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state_id"])
                return instance
            }


            // Decoder for [RequestPlanFind]
            Decoders.addDecoder(clazz: [RequestPlanFind].self) { (source: AnyObject) -> [RequestPlanFind] in
                return Decoders.decode(clazz: [RequestPlanFind].self, source: source)
            }
            // Decoder for RequestPlanFind
            Decoders.addDecoder(clazz: RequestPlanFind.self) { (source: AnyObject) -> RequestPlanFind in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestPlanFind()
                instance.applicants = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["applicants"])
                instance.enrollmentDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enrollment_date"])
                instance.drugPackages = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["drug_packages"])
                instance.fipsCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fips_code"])
                instance.householdIncome = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["household_income"])
                instance.householdSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["household_size"])
                instance.market = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["market"])
                instance.providers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["providers"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip_code"])
                return instance
            }


            // Decoder for [RequestPlanFindApplicant]
            Decoders.addDecoder(clazz: [RequestPlanFindApplicant].self) { (source: AnyObject) -> [RequestPlanFindApplicant] in
                return Decoders.decode(clazz: [RequestPlanFindApplicant].self, source: source)
            }
            // Decoder for RequestPlanFindApplicant
            Decoders.addDecoder(clazz: RequestPlanFindApplicant.self) { (source: AnyObject) -> RequestPlanFindApplicant in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestPlanFindApplicant()
                instance.age = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["age"])
                return instance
            }


            // Decoder for [RequestPlanFindProvider]
            Decoders.addDecoder(clazz: [RequestPlanFindProvider].self) { (source: AnyObject) -> [RequestPlanFindProvider] in
                return Decoders.decode(clazz: [RequestPlanFindProvider].self, source: source)
            }
            // Decoder for RequestPlanFindProvider
            Decoders.addDecoder(clazz: RequestPlanFindProvider.self) { (source: AnyObject) -> RequestPlanFindProvider in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestPlanFindProvider()
                instance.npi = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["npi"])
                return instance
            }


            // Decoder for [RequestProvidersSearch]
            Decoders.addDecoder(clazz: [RequestProvidersSearch].self) { (source: AnyObject) -> [RequestProvidersSearch] in
                return Decoders.decode(clazz: [RequestProvidersSearch].self, source: source)
            }
            // Decoder for RequestProvidersSearch
            Decoders.addDecoder(clazz: RequestProvidersSearch.self) { (source: AnyObject) -> RequestProvidersSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestProvidersSearch()
                instance.acceptsInsurance = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["accepts_insurance"])
                instance.hiosIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["hios_ids"])
                instance.page = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["page"])
                instance.perPage = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["per_page"])
                instance.radius = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["radius"])
                instance.searchTerm = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_term"])
                instance.zipCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip_code"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [State]
            Decoders.addDecoder(clazz: [State].self) { (source: AnyObject) -> [State] in
                return Decoders.decode(clazz: [State].self, source: source)
            }
            // Decoder for State
            Decoders.addDecoder(clazz: State.self) { (source: AnyObject) -> State in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = State()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.fipsNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fips_number"])
                instance.lastDateForIndividual = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_date_for_individual"])
                instance.lastDateForShop = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["last_date_for_shop"])
                instance.liveForBusiness = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["live_for_business"])
                instance.liveForConsumers = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["live_for_consumers"])
                return instance
            }


            // Decoder for [ZipCode]
            Decoders.addDecoder(clazz: [ZipCode].self) { (source: AnyObject) -> [ZipCode] in
                return Decoders.decode(clazz: [ZipCode].self, source: source)
            }
            // Decoder for ZipCode
            Decoders.addDecoder(clazz: ZipCode.self) { (source: AnyObject) -> ZipCode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ZipCode()
                instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                return instance
            }


            // Decoder for [ZipCountiesResponse]
            Decoders.addDecoder(clazz: [ZipCountiesResponse].self) { (source: AnyObject) -> [ZipCountiesResponse] in
                return Decoders.decode(clazz: [ZipCountiesResponse].self, source: source)
            }
            // Decoder for ZipCountiesResponse
            Decoders.addDecoder(clazz: ZipCountiesResponse.self) { (source: AnyObject) -> ZipCountiesResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ZipCountiesResponse()
                instance.counties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["counties"])
                instance.states = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["states"])
                instance.zipCounties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["zip_counties"])
                instance.zipCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["zip_codes"])
                return instance
            }


            // Decoder for [ZipCounty]
            Decoders.addDecoder(clazz: [ZipCounty].self) { (source: AnyObject) -> [ZipCounty] in
                return Decoders.decode(clazz: [ZipCounty].self, source: source)
            }
            // Decoder for ZipCounty
            Decoders.addDecoder(clazz: ZipCounty.self) { (source: AnyObject) -> ZipCounty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ZipCounty()
                instance.countyId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["county_id"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.zipCodeId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["zip_code_id"])
                return instance
            }


            // Decoder for [ZipCountyBulk]
            Decoders.addDecoder(clazz: [ZipCountyBulk].self) { (source: AnyObject) -> [ZipCountyBulk] in
                return Decoders.decode(clazz: [ZipCountyBulk].self, source: source)
            }
            // Decoder for ZipCountyBulk
            Decoders.addDecoder(clazz: ZipCountyBulk.self) { (source: AnyObject) -> ZipCountyBulk in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ZipCountyBulk()
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.ratingAreaId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["rating_area_id"])
                instance.countyId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["county_id"])
                instance.zipCodeId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip_code_id"])
                return instance
            }


            // Decoder for [ZipCountyResponse]
            Decoders.addDecoder(clazz: [ZipCountyResponse].self) { (source: AnyObject) -> [ZipCountyResponse] in
                return Decoders.decode(clazz: [ZipCountyResponse].self, source: source)
            }
            // Decoder for ZipCountyResponse
            Decoders.addDecoder(clazz: ZipCountyResponse.self) { (source: AnyObject) -> ZipCountyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ZipCountyResponse()
                instance.counties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["counties"])
                instance.states = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["states"])
                instance.zipCodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["zip_codes"])
                instance.zipCounty = Decoders.decodeOptional(clazz: ZipCounty.self, source: sourceDictionary["zip_county"])
                return instance
            }
        }
    }
}
